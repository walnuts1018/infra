grafana:
  replicas: 2
  resources:
    limits:
      memory: 800Mi
    requests:
      memory: 340Mi
  ingress:
    enabled: true
    hosts:
    - grafana.walnuts.dev
    ingressClassName: cilium
  rbac:
    pspEnabled: false
  testFramework:
    enabled: false
  persistence:
    enabled: false
  service:
    type: ClusterIP
  admin:
    existingSecret: "grafana"
    userKey: admin-username
    passwordKey: admin-password
  extraSecretMounts:
  - name: auth-generic-oauth-secret
    secretName: grafana
    mountPath: /etc/secrets
    readOnly: true
  grafana.ini:
    server:
      domain: grafana.walnuts.dev
      root_url: https://grafana.walnuts.dev/
    log:
      level: debug
    auth:
      disable_login_form: true
      oauth_auto_login: true
    auth.basic:
      enabled: false
    auth.generic_oauth:
      enabled: true
      client_id: 237480184528306541@walnuts.dev
      client_secret: $__file{/etc/secrets/client_secret}
      scopes: openid email profile offline_access urn:zitadel:iam:org:projects:roles
      email_attribute_path: email
      login_attribute_path: preferred_username
      name_attribute_path: preferred_username
      auth_url: https://auth.walnuts.dev/oauth/v2/authorize
      token_url: https://auth.walnuts.dev/oauth/v2/token
      api_url: https://auth.walnuts.dev/oidc/v1/userinfo
      role_attribute_strict: true
      role_attribute_path: |
        "urn:zitadel:iam:org:project:roles"."admin"  && 'GrafanaAdmin' || "urn:zitadel:iam:org:project:roles"."grafana-editor" && 'Editor' || "urn:zitadel:iam:org:project:roles"."grafana-viewer" && 'Viewer'
      allow_assign_grafana_admin: true
      use_pkce: true
    smtp:
      enabled: true
      from_address: grafana@resend.walnuts.dev
      host: smtp.resend.com:587
      user: "resend"
      password: $__file{/etc/secrets/smtp_password}
    database:
      type: postgres
      host: postgresql-default.databases.svc.cluster.local
      name: grafana
      user: grafana
      password: $__file{/etc/secrets/postgres_password}
  sidecar:
    plugins:
      enabled: true
  plugins:
  - knightss27-weathermap-panel
  - grafana-github-datasource
prometheus-node-exporter:
  prometheus:
    monitor:
      relabelings:
      - sourceLabels: [ __meta_kubernetes_pod_node_name ]
        separator: ;
        regex: ^(.*)$
        targetLabel: node
        replacement: $1
        action: replace
prometheus:
  prometheusSpec:
    serviceMonitorSelector:
      matchLabels: {} #全てのServiceMonitorを監視対象にする
    podMonitorSelector:
      matchLabels: {} #全てのPodMonitorを監視対象にする
    probeSelector:
      matchLabels: {} #全てのProbeを監視対象にする
    probeNamespaceSelector:
      matchLabels: {} #全てのNamespaceのProbeを監視対象にする
    storageSpec:
      volumeClaimTemplate:
        spec:
          storageClassName: longhorn-local
          accessModes: [ "ReadWriteOnce" ]
          resources:
            requests:
              storage: 32Gi
    resources:
      requests:
        memory: 2Gi
      limits:
        memory: 4Gi
    retention: 14d
    retentionSize: 30GiB
    replicas: 1
    enableRemoteWriteReceiver: true
    enableOTLPReceiver: true
    otlp:
      translationStrategy: "NoUTF8EscapingWithSuffixes"
    tsdb:
      outOfOrderTimeWindow: 30m
    additionalConfig:
      enableOTLPReceiver: true
      otlp:
        translationStrategy: "NoUTF8EscapingWithSuffixes"
additionalPrometheusRulesMap:
  opentelemetry:
    groups:
    - name: k8s_resource_requests
      rules:
      - record: k8s_deployment:k8s_container_cpu_request_pressure:avg
        expr: avg (avg by (container_id) (rate(container_cpu_time_seconds_total[30s])) / on(container_id) group_left avg by (container_id) (k8s_container_cpu_request)) by (k8s_namespace_name, k8s_deployment_name, k8s_container_name)
      - record: k8s_deployment:k8s_container_memory_request_pressure:avg
        expr: avg (avg by (container_id) (container_memory_usage_bytes) / on(container_id) group_left avg by (container_id) (k8s_container_memory_request_bytes)) by (k8s_namespace_name, k8s_deployment_name, k8s_container_name)
