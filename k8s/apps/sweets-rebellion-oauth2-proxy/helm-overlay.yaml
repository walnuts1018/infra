---
apiVersion: source.toolkit.fluxcd.io/v1beta1
kind: HelmRepository
metadata:
  name: repo
spec:
  url: https://oauth2-proxy.github.io/manifests
---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: release
spec:
  chart:
    spec:
      chart: oauth2-proxy
      version: 6.10.1
      sourceRef:
        kind: HelmRepository
        name: sweets-rebellion-oauth2-proxy-repo
  values:
    config:
      existingSecret: sweets-rebellion-oauth2-proxy-secret
      configFile: |-
        email_domains = [ "*" ]
        upstreams = [ "http://sweets-rebellion-sweets-rebellion.sweets-rebellion.svc.cluster.local/" ]

    extraArgs:
      provider: oidc
      redirect-url: https://sweets-rebellion.walnuts.dev/oauth2/callback
      oidc-issuer-url: https://auth.walnuts.dev/realms/master
      allowed-role: kmc
      #reverse-proxy: true
      skip-provider-button: true


    ingress:
      enabled: true
      className: nginx
      path: /
      # Only used if API capabilities (networking.k8s.io/v1) allow it
      pathType: Prefix
      # Used to create an Ingress record.
      hosts:
       - "sweets-rebellion.walnuts.dev"

    # Configure the session storage type, between cookie and redis
    sessionStorage:
      # Can be one of the supported session storage cookie|redis
      type: redis
      redis:
        # Name of the Kubernetes secret containing the redis & redis sentinel password values (see also `sessionStorage.redis.passwordKey`)
        #existingSecret: ""
        # Key of the Kubernetes secret data containing the redis password value
        #passwordKey: "redis-password"
        # Can be one of standalone|cluster|sentinel
        #clientType: "standalone"
        #standalone:
          # URL of redis standalone server for redis session storage (e.g. `redis://HOST[:PORT]`). Automatically generated if not set
          #connectionUrl: "redis://sweets-rebellion-frontend.sweets-rebellion-system.svc.cluster.local:6379"

    # Enables and configure the automatic deployment of the redis subchart
    redis:
      # provision an instance of the redis sub-chart
      enabled: true
      # Redis specific helm chart settings, please see:
      # https://github.com/bitnami/charts/tree/master/bitnami/redis#parameters
      # redisPort: 6379
      #cluster:
        #enabled: false
        #slaveCount: 1
      image:
        tag: 7.0.9-debian-11-r6
      replica:
        replicaCount: 1

    metrics:
      # Enable Prometheus metrics endpoint
      enabled: false
      # Serve Prometheus metrics on this port
      port: 44180
      # when service.type is NodePort ...
      # nodePort: 44180
      # Protocol set on the service for the metrics port
      service:
        appProtocol: http
      servicemonitor:
        # Enable Prometheus Operator ServiceMonitor
        enabled: false
        # Define the namespace where to deploy the ServiceMonitor resource
        namespace: ""
        # Prometheus Instance definition
        prometheusInstance: default
        # Prometheus scrape interval
        interval: 60s
        # Prometheus scrape timeout
        scrapeTimeout: 30s
        # Add custom labels to the ServiceMonitor resource
        labels: {}