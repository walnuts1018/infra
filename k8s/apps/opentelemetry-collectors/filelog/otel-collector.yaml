apiVersion: opentelemetry.io/v1beta1
kind: OpenTelemetryCollector
metadata:
  name: filelog
spec:
  mode: daemonset
  serviceAccount: otel-collector
  config:
    receivers:
      filelog:
        include:
        - /var/log/pods/*/*/*.log
        exclude:
        - /var/log/pods/*/otel-collector/*.log
        start_at: beginning
        include_file_path: true
        include_file_name: false
        operators:
        - id: get-format # Find out which format is used by kubernetes
          type: router
          routes:
          - output: parser-crio
            expr: 'body matches "^[^ Z]+ "'
          - output: parser-containerd
            expr: 'body matches "^[^ Z]+Z"'
          - output: parser-docker
            expr: 'body matches "^\\{"'
        - id: parser-crio # Parse CRI-O format
          type: regex_parser
          regex: '^(?P<time>[^ Z]+) (?P<stream>stdout|stderr) (?P<logtag>[^ ]*) ?(?P<log>.*)$'
          # output: extract_metadata_from_filepath
          timestamp:
            parse_from: attributes.time
            layout_type: gotime
            layout: '2006-01-02T15:04:05.999999999Z07:00'
        - id: parser-containerd # Parse CRI-Containerd format
          type: regex_parser
          regex: '^(?P<time>[^ ^Z]+Z) (?P<stream>stdout|stderr) (?P<logtag>[^ ]*) ?(?P<log>.*)$'
          # output: extract_metadata_from_filepath
          timestamp:
            parse_from: attributes.time
            layout: '%Y-%m-%dT%H:%M:%S.%LZ'
        - id: parser-docker # Parse Docker format
          type: json_parser
          # output: extract_metadata_from_filepath
          timestamp:
            parse_from: attributes.time
            layout: '%Y-%m-%dT%H:%M:%S.%LZ'
        - type: move
          from: attributes.log
          to: body
        # - id: extract_metadata_from_filepath
    #   type: regex_parser
    #   regex: '^.*\/(?P<namespace>[^_]+)_(?P<pod_name>[^_]+)_(?P<uid>[a-f0-9\-]{36})\/(?P<container_name>[^\._]+)\/(?P<restart_count>\d+)\.log$'
    #   parse_from: attributes["log.file.path"]
    #   cache:
    #     size: 128
    # - type: move
    #   from: attributes.stream
    #   to: attributes["log.iostream"]
    # - type: move
    #   from: attributes.container_name
    #   to: resource["k8s.container.name"]
    # - type: move
    #   from: attributes.namespace
    #   to: resource["k8s.namespace.name"]
    # - type: move
    #   from: attributes.pod_name
    #   to: resource["k8s.pod.name"]
    # - type: move
    #   from: attributes.restart_count
    #   to: resource["k8s.container.restart_count"]
    # - type: move
    #   from: attributes.uid
    #   to: resource["k8s.pod.uid"]
    processors:
      memory_limiter:
        check_interval: 1s
        limit_percentage: 75
        spike_limit_percentage: 15
      batch:
        send_batch_size: 10000
        timeout: 10s
      k8sattributes:
        auth_type: "serviceAccount"
        extract:
          metadata:
          - k8s.namespace.name
          - k8s.pod.name
          - k8s.pod.start_time
          - k8s.pod.uid
          - k8s.deployment.name
          - k8s.node.name
        pod_association:
        - sources: # First try to use the value of the resource attribute k8s.pod.ip
          - from: resource_attribute
            name: k8s.pod.ip
        - sources: # Then try to use the value of the resource attribute k8s.pod.uid
          - from: resource_attribute
            name: k8s.pod.uid
        - sources: # If neither of those work, use the request's connection to get the pod IP.
          - from: connection
    exporters:
      otlp/default:
        endpoint: default-collector.opentelemetry-collector.svc.cluster.local:4317
        tls:
          insecure: true
      debug:
        verbosity: detailed
        sampling_initial: 5
        sampling_thereafter: 200
    service:
      pipelines:
        logs:
          receivers: [filelog]
          processors: [memory_limiter, batch, k8sattributes]
          exporters: [otlp/default, debug]
  volumeMounts:
  - name: varlogpods
    mountPath: /var/log/pods
    readOnly: true
  - name: varlibdockercontainers
    mountPath: /var/lib/docker/containers
    readOnly: true
  volumes:
  - name: varlogpods
    hostPath:
      path: /var/log/pods
  - name: varlibdockercontainers
    hostPath:
      path: /var/lib/docker/containers
  securityContext:
    runAsUser: 0
    runAsGroup: 0
