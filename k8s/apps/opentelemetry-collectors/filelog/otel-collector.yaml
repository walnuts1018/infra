apiVersion: opentelemetry.io/v1beta1
kind: OpenTelemetryCollector
metadata:
  name: filelog
spec:
  mode: daemonset
  serviceAccount: otel-collector
  managementState: managed
  config:
    receivers:
      filelog:
        include_file_path: true
        include:
        - /var/log/pods/*/*/*.log
        operators:
        - id: container-parser
          type: container
    processors:
      memory_limiter:
        check_interval: 1s
        limit_mib: 2000
        spike_limit_percentage: 15
      batch:
        send_batch_size: 10000
        timeout: 10s
      k8sattributes:
        auth_type: "serviceAccount"
        extract:
          metadata:
          - k8s.namespace.name
          - k8s.pod.name
          - k8s.pod.start_time
          - k8s.pod.uid
          - k8s.deployment.name
          - k8s.node.name
        pod_association:
        - sources: # First try to use the value of the resource attribute k8s.pod.ip
          - from: resource_attribute
            name: k8s.pod.ip
        - sources: # Then try to use the value of the resource attribute k8s.pod.uid
          - from: resource_attribute
            name: k8s.pod.uid
        - sources: # If neither of those work, use the request's connection to get the pod IP.
          - from: connection
    exporters:
      otlp/default:
        endpoint: default-collector.opentelemetry-collector.svc.cluster.local:4317
        tls:
          insecure: true
      debug:
        verbosity: detailed
        sampling_initial: 5
        sampling_thereafter: 200
    service:
      pipelines:
        logs:
          receivers: [filelog]
          processors: [memory_limiter, batch, k8sattributes]
          exporters: [otlp/default]
  volumeMounts:
  - name: varlogpods
    mountPath: /var/log/pods
    readOnly: true
  - name: varlibdockercontainers
    mountPath: /var/lib/docker/containers
    readOnly: true
  volumes:
  - name: varlogpods
    hostPath:
      path: /var/log/pods
  - name: varlibdockercontainers
    hostPath:
      path: /var/lib/docker/containers
  securityContext:
    runAsUser: 0
    runAsGroup: 0
